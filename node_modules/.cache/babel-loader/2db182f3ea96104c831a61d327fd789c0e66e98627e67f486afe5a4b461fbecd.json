{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { APIService } from \"@/http/APIService\";\nconst apiService = new APIService();\nimport router from \"../router\";\nexport default {\n  data() {\n    return {\n      movies: {},\n      validUserName: \"Guest\",\n      movieSize: 0,\n      showMsg: '',\n      isMobile: false,\n      authenticated: false,\n      headers: [{\n        text: 'Name',\n        sortable: false,\n        align: 'left'\n      }, {\n        text: 'Description',\n        sortable: false,\n        align: 'left'\n      }, {\n        text: 'Year',\n        sortable: false,\n        align: 'left'\n      }, {\n        text: 'Rating',\n        sortable: false,\n        align: 'left'\n      }, {\n        text: 'Update',\n        sortable: false,\n        align: 'center'\n      }, {\n        text: 'Delete',\n        sortable: false,\n        align: 'center'\n      }]\n    };\n  },\n  mounted() {\n    this.authenticated = localStorage.getItem(\"isAuthenticated\");\n    this.getMovies();\n  },\n  methods: {\n    onResize() {\n      if (window.innerWidth > 600) this.isMobile = true;else this.isMobile = false;\n    },\n    showMessages() {\n      if (this.$route.params.msg) {\n        this.showMsg = this.$route.params.msg;\n      }\n    },\n    getMovies() {\n      apiService.getMovieList().then(response => {\n        this.movies = response.data.data;\n        this.movieSize = this.movies.length;\n        if (localStorage.getItem(\"isAuthenticated\") && JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true) {\n          this.validUserName = JSON.parse(localStorage.getItem(\"log_user\"));\n        }\n      }).catch(error => {\n        localStorage.removeItem(\"isAuthenticated\");\n        localStorage.setItem(\"isAuthenticated\", false);\n        localStorage.removeItem(\"log_user\");\n        localStorage.removeItem(\"access\");\n        router.push(\"/auth\");\n      });\n    },\n    addNewMovie() {\n      if (localStorage.getItem(\"isAuthenticated\") && JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true) {\n        router.push('/movie-create');\n      } else {\n        router.push(\"/auth\");\n      }\n    },\n    updateMovie(movie) {\n      router.push(\"/movie-create/\" + movie.pk);\n    },\n    deleteMovie(movie) {\n      if (confirm(\"Do you really want to delete?\")) {\n        apiService.deleteMovie(movie.pk).then(response => {\n          if (response.status === 204) {\n            router.push('/movie-list/deleted/');\n            this.getMovies();\n          }\n        }).catch(error => {\n          if (error.response.status === 401) {\n            // \"not authorized\"\n            router.push(\"/auth\");\n          } else if (error.response.status === 400) {\n            //\"bad request\"\n            this.showMsg = \"error\";\n          } else {\n            this.showMsg = \"error\";\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["APIService","apiService","router","data","movies","validUserName","movieSize","showMsg","isMobile","authenticated","headers","text","sortable","align","mounted","localStorage","getItem","getMovies","methods","onResize","window","innerWidth","showMessages","$route","params","msg","getMovieList","then","response","length","JSON","parse","catch","error","removeItem","setItem","push","addNewMovie","updateMovie","movie","pk","deleteMovie","confirm","status"],"sources":["C:\\Users\\jesus\\Desktop\\Assignment 2 Movies be pt1\\movies-fe\\src\\components\\MovieList.vue"],"sourcesContent":["<template>\r\n<div class=\"container-fluid\">\r\n<div class=\"row align-items-center justify-content-center\">\r\n  <div class=\"col col-12 align-items-center justify-content-center\">\r\n    <blockquote>\r\n      Welcome {{ validUserName }}!\r\n      <footer>\r\n        <small>\r\n          <em>&mdash; Every great film should seem new every time you see it.- Roger Ebert</em>\r\n        </small>\r\n      </footer>\r\n    </blockquote>\r\n  </div>\r\n  <div class=\"col-12 col-md-10 col-lg-10 col-12 align-items-center justify-content-center\">\r\n    <div class=\"alert alert-success\"\r\n         v-if=\"showMsg === 'new'\"\r\n         :value=\"true\">\r\n      New movie has been added.\r\n    </div>\r\n    <div class=\"alert alert-success\"\r\n         v-if=\"showMsg === 'update'\"\r\n         :value=\"true\">\r\n      Movie information has been updated.\r\n    </div>\r\n    <div class=\"alert alert-success\"\r\n         v-if=\"showMsg === 'deleted'\"\r\n         :value=\"true\">\r\n      Selected Movie has been deleted.\r\n    </div>\r\n  </div>\r\n</div>\r\n<!--Mobile device view-->\r\n<div class=\"d-md-none\" id=\"collapsable-card\" style=\"width: 80%\">\r\n  <button v-if=\"this.authenticated === 'true'\" type=\"button\" class=\"btn btn-primary\" @click=\"addNewMovie\">\r\n    <font-awesome-icon icon=\"plus\"/>\r\n  </button>\r\n  <div class=\"card\" v-for=\"movie in movies\" v-bind:key=\"movie\">\r\n    <div class=\"card-header\" :id=\"'heading' + movie.name\">\r\n      <button class=\"btn btn-link collapsed\" data-bs-toggle=\"collapse\"\r\n              :data-bs-target=\"'#collapse' + movie.pk\"\r\n              aria-expanded=\"true\" :aria-controls=\"'collapse' + movie.pk\">\r\n        <h6 style=\"color: #0275d8; float: left\">{{ movie.name }}</h6>\r\n      </button>\r\n    </div>\r\n    <div :id=\"'collapse' + movie.pk\" class=\"collapse\" :aria-labelledby=\"'heading' +\r\n                            movie.pk\" data-bs-parent=\"#collapsable-card\">\r\n      <div class=\"card-body\">\r\n        <p><b>Name:</b> {{ movie.name }}</p>\r\n        <p><b>Description:</b>{{ movie.description }}</p>\r\n        <p><b>Year:</b> {{ movie.year }}</p>\r\n        <p><b>Rating:</b> {{ movie.rating }}</p>\r\n        <div v-if=\"this.authenticated === 'true'\" class=\"btn-group\">\r\n          <button @click=\"updateMovie(movie)\" style=\"background-color: transparent; padding: 5;\">\r\n            <font-awesome-icon icon=\"pencil\"/>\r\n          </button>\r\n          <button @click=\"deleteMovie(movie)\" style=\"background-color: transparent; padding: 5;\">\r\n            <font-awesome-icon icon=\"trash\"/>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!--non-Mobile device view-->\r\n<!-- Data table - only allow update/delete when authenticated user -->\r\n<div class=\"row align-items-center justify-content-center\">\r\n  <div class=\"col col-12 col-md-10 d-none d-xl-block d-lg-block d-md-block\">\r\n    <table class=\"table table-hover\" style=\"overflow-y: auto\"\r\n           :headers=\"headers\">\r\n      <thead>\r\n      <tr>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Description</th>\r\n        <th scope=\"col\">Year</th>\r\n        <th scope=\"col\">Rating</th>\r\n        <th v-if=\"this.authenticated === 'true'\" scope=\"col\">Update</th>\r\n        <th v-if=\"this.authenticated === 'true'\" scope=\"col\">Delete</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr v-for=\"movie in movies\" v-bind:key=\"movie\">\r\n        <th scope=\"row\">{{ movie.name }}</th>\r\n        <td>{{ movie.description }}</td>\r\n        <td>{{ movie.year }}</td>\r\n        <td>{{ movie.rating }}</td>\r\n\r\n        <td v-if=\"this.authenticated === 'true'\" @click=\"updateMovie(movie)\">\r\n          <button style=\"background-color: transparent; padding: 0;\">\r\n            <font-awesome-icon icon=\"pencil\"/>\r\n          </button>\r\n        </td>\r\n        <td v-if=\"this.authenticated === 'true'\" @click=\"deleteMovie(movie)\">\r\n          <button style=\"background-color: transparent; padding: 0;\">\r\n            <font-awesome-icon icon=\"trash\"/>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n    <!-- Only allow add of movie when authenticated user -->\r\n    <div v-if=\"this.authenticated === 'true'\">\r\n      <button type=\"button\" class=\"btn btn-primary\" @click=\"addNewMovie\">Add New Movie</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport {APIService} from \"@/http/APIService\";\r\n\r\nconst apiService = new APIService();\r\nimport router from \"../router\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      movies: {},\r\n      validUserName: \"Guest\",\r\n      movieSize: 0,\r\n      showMsg: '',\r\n      isMobile: false,\r\n      authenticated: false,\r\n      headers: [\r\n        {text: 'Name', sortable: false, align: 'left'},\r\n        {text: 'Description', sortable: false, align: 'left',},\r\n        {text: 'Year', sortable: false, align: 'left',},\r\n        {text: 'Rating', sortable: false, align: 'left',},\r\n        {text: 'Update', sortable: false, align: 'center',},\r\n        {text: 'Delete', sortable: false, align: 'center',},\r\n      ],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.authenticated = localStorage.getItem(\"isAuthenticated\")\r\n    this.getMovies();\r\n  },\r\n  methods: {\r\n    onResize() {\r\n      if (window.innerWidth > 600)\r\n        this.isMobile = true;\r\n      else\r\n        this.isMobile = false;\r\n    },\r\n    showMessages() {\r\n      if (this.$route.params.msg) {\r\n        this.showMsg = this.$route.params.msg;\r\n      }\r\n    },\r\n    getMovies() {\r\n      apiService\r\n          .getMovieList()\r\n          .then((response) => {\r\n            this.movies = response.data.data;\r\n            this.movieSize = this.movies.length;\r\n            if (\r\n                localStorage.getItem(\"isAuthenticated\") &&\r\n                JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true\r\n            ) {\r\n              this.validUserName = JSON.parse(localStorage.getItem(\"log_user\"));\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            localStorage.removeItem(\"isAuthenticated\");\r\n            localStorage.setItem(\"isAuthenticated\", false)\r\n            localStorage.removeItem(\"log_user\");\r\n            localStorage.removeItem(\"access\");\r\n            router.push(\"/auth\");\r\n          });\r\n    },\r\n    addNewMovie() {\r\n      if (localStorage.getItem(\"isAuthenticated\")\r\n          && JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true) {\r\n        router.push('/movie-create');\r\n      } else {\r\n        router.push(\"/auth\");\r\n      }\r\n    },\r\n    updateMovie(movie) {\r\n      router.push(\"/movie-create/\" + movie.pk);\r\n    },\r\n    deleteMovie(movie) {\r\n      if (confirm(\"Do you really want to delete?\")) {\r\n        apiService.deleteMovie(movie.pk).then(response => {\r\n          if (response.status === 204) {\r\n            router.push('/movie-list/deleted/')\r\n            this.getMovies()\r\n          }\r\n        }).catch(error => {\r\n          if (error.response.status === 401) { // \"not authorized\"\r\n            router.push(\"/auth\");\r\n          } else if (error.response.status === 400) { //\"bad request\"\r\n            this.showMsg = \"error\";\r\n          } else {\r\n            this.showMsg = \"error\";\r\n          }\r\n\r\n        });\r\n      }\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nbutton {\r\n  padding: 1rem;\r\n  border: 0;\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}